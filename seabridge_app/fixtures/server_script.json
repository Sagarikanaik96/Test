[
 {
  "allow_guest": 0,
  "api_method": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "modified": "2020-10-02 04:53:10.702203",
  "name": "Auto Create Sales Order",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": "Purchase Order",
  "script": "customer=frappe.db.get_value('Customer',{'is_internal_customer':1,'represents_company':doc.company},'customer_name')\ncompany=frappe.db.get_value('Supplier',{'is_internal_supplier':1,'supplier_name':doc.supplier_name},'represents_company')\nif customer:\n\t\t\tif company:\n\t\t\t\ttaxes=frappe.db.get_value('Sales Taxes and Charges Template',{'company':doc.supplier_name},'name')\n\t\t\t\ttax=frappe.db.get_list(\"Sales Taxes and Charges\",filters={'parent':taxes,'parenttype':'Sales Taxes and Charges Template'},fields={'*'})\n\t\t\t\tso_doc=frappe.get_doc(dict(doctype = 'Sales Order',\n\t\t\t\t\t    company=company,\n\t\t\t\t\t    customer=customer,\n\t\t\t\t\t    delivery_date=doc.schedule_date,\n\t\t\t\t\t    customer_address=frappe.db.get_value(\"Dynamic Link\",{\"parenttype\":\"Address\",\"link_doctype\":\"Customer\",\"link_name\":customer},\"parent\"),\n\t\t\t\t\t    contact_person=frappe.db.get_value('Dynamic Link',{'parenttype':'Contact','link_doctype':'Customer',\"link_name\":customer},'parent'),\n\t\t\t\t\t    taxes_and_charges=frappe.db.get_value('Sales Taxes and Charges Template',{'company':doc.supplier_name},'name'),\n\t\t\t\t\t    po_no=doc.name,\n\t\t\t\t\t    po_date=doc.transaction_date,\n\t\t\t\t\t    total=doc.total,\n\t\t\t\t\t    grand_total=doc.grand_total,\n\t\t\t\t\t    base_grand_total=doc.base_grand_total,\n\t\t\t\t\t    rounded_total=doc.rounded_total,\n\t\t\t\t\t    base_rounded_total=doc.base_rounded_total,\n\t\t\t\t\t    payment_terms_template=doc.payment_terms_template,\n\t\t\t\t\t    tc_name=doc.tc_name\n\t\t\t\t\t)).insert(ignore_mandatory=True)\n\t\t\t\tfor val in doc.items:\n\t\t\t\t\tso_doc.append('items', {\n\t\t\t\t\t    'item_code':val.item_code,\n\t\t\t\t\t    'delivery_date':doc.schedule_date,\n\t\t\t\t\t    'qty':val.qty,\n\t\t\t\t\t    'uom':val.uom,\n\t\t\t\t\t    'stock_uom':val.stock_uom,\n\t\t\t\t\t    'rate':val.rate,\n\t\t\t\t\t    'amount':val.amount,\n\t\t\t\t\t    'base_rate':val.base_rate,\n\t\t\t\t\t    'base_amount':val.base_amount,\n\t\t\t\t\t    'description':val.description,\n\t\t\t\t\t'conversion_factor':val.conversion_factor\n\t\t\t\t\t})\n\t\t\t\tfor row in tax:\n\t\t\t\t    so_doc.append('taxes',{\n\t\t\t\t\t'account_head':row.account_head,\n\t\t\t\t\t'charge_type':row.charge_type,\n\t\t\t\t\t'rate':row.rate\n\t\t\t\t    })\n\t\t\t\tso_doc.add_comment('Comment',' System created  '+so_doc.name)\n\t\t\t\tso_doc.save()\n\t\t\t\tdoc.add_comment('Comment','  Sales Order: '+so_doc.name)\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "modified": "2020-10-02 04:50:07.026871",
  "name": "On Registration Submit",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": "Registration",
  "script": "co_doc=frappe.get_doc(dict(doctype = 'Company',\n                    company_name=doc.company,\n                    abbr=doc.abbr,\n                    default_currency=doc.default_currency,\n                    country=doc.country,\n                    is_group=doc.is_group,\n                    parent_company=doc.parent_company\n        )).insert(ignore_mandatory=True)\nco_doc.save()\n\nus_doc=frappe.get_doc(dict(doctype = 'User',\n                    email=doc.email,\n                    first_name=doc.first_name,\n                    last_name=doc.last_name,\n                    send_welcome_email=doc.send_welcome_email\n        )).insert(ignore_mandatory=True)\nus_doc.save()\n\nup_doc=frappe.get_doc(dict(doctype = 'User Permission',\n                    user=doc.email,\n                    allow=\"Company\",\n                    for_value=doc.company,\n                    apply_to_all_doctypes=1\n        )).insert(ignore_mandatory=True)\nup_doc.save()\n\nif doc.company_type==\"Vendor\":\n        su_doc=frappe.get_doc(dict(doctype = 'Supplier',\n                    supplier_name=doc.supplier_name,\n                    supplier_group=doc.supplier_group,\n                    supplier_type=doc.supplier_type,\n                    country=doc.country,\n                    is_internal_supplier=1,\n                    represents_company=doc.company\n        )).insert(ignore_mandatory=True)\n        su_doc.save()\n        \n        \n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "modified": "2020-09-16 22:08:33.999724",
  "name": "Auto Creation of Purchase Invoice",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": "Sales Invoice",
  "script": "supplier=frappe.db.get_value('Supplier',{'is_internal_supplier':1,'represents_company':doc.company},'supplier_name')\ncompany=frappe.db.get_value('Customer',{'is_internal_Customer':1,'customer_name':doc.customer_name},'represents_company')\ncontact_person=frappe.db.get_value('Dynamic Link',{'parenttype':'Contact','link_doctype':'Supplier',\"link_name\":supplier},'parent')\nif company:\n    if supplier:\n        tax_template=frappe.db.get_value('Purchase Taxes and Charges Template',{'company':doc.customer_name},'name')\n        tax_list=frappe.db.get_list(\"Purchase Taxes and Charges\",filters={'parent':tax_template,'parenttype':'Purchase Taxes and Charges Template'},fields={'*'})\n        pi_doc=frappe.get_doc(dict(doctype = 'Purchase Invoice',\n                    supplier=supplier,\n                    company=company,\n                    posting_date=doc.posting_date,\n                    due_date=doc.due_date,\n                    supplier_address=frappe.db.get_value(\"Dynamic Link\",{\"parenttype\":\"Address\",\"link_doctype\":\"Supplier\",\"link_name\":supplier},\"parent\"),\n                    contact_person=contact_person,\n        \t\t    contact_email=frappe.db.get_value('Contact Email', {'parenttype':'Contact','parent':contact_person},'email_id'),\n                    conversion_rate=1,\n                    bill_no=doc.name,\n                    bill_date=doc.posting_date,\n                    tc_name=doc.tc_name,\n                    payment_terms_template=doc.payment_terms_template,\n                    terms=doc.terms,\n                    total=doc.total,\n                    grand_total=doc.grand_total,\n                    base_grand_total=doc.base_grand_total,\n                    rounded_total=doc.rounded_total,\n                    base_rounded_total=doc.base_rounded_total\n                )).insert(ignore_mandatory=True)\n        for val in doc.items:\n                pi_doc.append('items', {\n                    'item_code':val.item_code,\n                    'qty':val.qty,\n                    'uom':val.uom,\n                    'stock_uom':val.stock_uom,\n                    'rate':val.rate,\n                    'amount':val.amount,\n                    'base_rate':val.base_rate,\n                    'base_amount':val.base_amount,\n                    'description':val.description,\n                    'conversion_factor':val.conversion_factor\n                })\n        for tax in tax_list:\n                pi_doc.append('taxes',{\n                    'account_head':tax.account_head,\n                    'charge_type':tax.charge_type,\n                    'rate':frappe.db.get_value(\"Sales Taxes and Charges\",{'parent':doc.name,'parenttype':'Sales Invoice'},'rate')\n            })\n        pi_doc.add_comment('Comment',' System created  '+pi_doc.name)\n        pi_doc.save()\n        doc.add_comment('Comment','  Purchase Invoice: '+pi_doc.name)  \nelse:\n    frappe.msgprint('Unable to create  Sales Invoice as customer: '+doc.customer_name +' is not associated with any company. Register the Customer for the Company and submit the document: '+doc.name+ '.')\n    raise frappe.ValidationError('Unable to create  Sales Invoice as customer: '+doc.customer_name +' is not associated with any company. Register the Customer for the Company and submit the document: '+doc.name+ '.')",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "modified": "2020-09-21 14:56:18.548891",
  "name": "Create Opportunity",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": "Request for Quotation",
  "script": "def create_user_permission(user,allow,value,check,applicable_for=''):\n#user,allow,for_value,apply_to_all_doctypes,applicable_for\n    docVal=frappe.db.get_list('User Permission', filters={'user':user,'for_value':value,'allow':allow,'apply_to_all_doctypes':check,'applicable_for':applicable_for})\n    if not docVal:\n        frappe.get_doc(dict(doctype = 'User Permission',\n        \tuser = user,\n            allow=allow,\n        \tfor_value =value,\n        \tapply_to_all_doctypes=check,\n        \tapplicable_for=applicable_for)).insert()\n   \nfor row in doc.suppliers:\n    try:\n        customer=frappe.db.get_value('Customer',{'is_internal_customer':1,'represents_company':doc.company},'customer_name')\n        company=frappe.db.get_value('Supplier',{'is_internal_supplier':1,'supplier_name':row.supplier},'represents_company')\n        contact_person=frappe.db.get_value('Dynamic Link',{'parenttype':'Contact','link_doctype':'Customer','link_name':customer},'parent')\n        customer_address=frappe.db.get_value('Dynamic Link',{'parenttype':'Address','link_doctype':'Customer','link_name':customer},'parent')\n        if customer:\n            if company:\n                create_user_permission(row.email_id,'Company',company,True)\n                opp_doc=frappe.get_doc(dict(doctype = 'Opportunity',\n        \t\t\t        opportunity_from = 'Customer',\n        \t\t        \tparty_name=customer,\n        \t\t        \tcontact_person=contact_person,\n        \t\t        \twith_items=1,\n        \t\t        \tcustomer_address=customer_address,\n        \t\t            contact_display=contact_person,\n        \t\t            contact_email=frappe.db.get_value('Contact Email', {'parenttype':'Contact','parent':contact_person},'email_id'),\n        \t\t            company=company,\n        \t\t        \treference_no=doc.name,\n        \t\t        \tignore_permissions='true')).insert()\n                for val in doc.items:\n        \t\t        opp_doc.append('items', {\n        \t\t            'item_code': val.item_code,\n        \t\t            'qty': val.qty,\n        \t\t            'uom':val.uom\n        \t\t            })\n        \t\t        opp_doc.add_comment('Comment',row.supplier+' created')\n        \t\t        opp_doc.save()\n                doc.add_comment('Created','  created Opportunity for '+row.supplier)\n                companyName=frappe.db.get_value('Item',val.item_code,'company_name')\n                if companyName:\n                    create_user_permission(row.email_id,'Company',companyName,False,'Item')\n                    \n        else:\n            frappe.msgprint('Unable to create Opportunity as customer: '+doc.company+ ' is not associated with any company. Register the Company and submit the document: '+doc.name+'. As Customer is not associated with any company, do not let MA submit the RFQ document.')\n            raise frappe.ValidationError('Unable to create Opportunity as customer: ' +doc.company+' is not associated with any company.  ')\n    except KeyError:\n        pass",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Cancel",
  "modified": "2020-09-21 15:46:35.726222",
  "name": "Validate RFQ",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": "Request for Quotation",
  "script": "frappe.msgprint('Unable to cancel the document as Request for Quotation '+doc.name+' is linked with the submitted opportunity')\nraise frappe.ValidationError('Unable to cancel the document as Request for Quotation'+doc.name+'is linked with the submitted opportunity')",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "get_company_name",
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "modified": "2020-09-21 14:57:12.200528",
  "name": "Get Company Name",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": null,
  "script": "doctype=frappe.form_dict.get(\"doctype\")\nis_internal_supplier=frappe.form_dict.get(\"is_internal_supplier\")\nsupplier=frappe.form_dict.get(\"supplier_name\")\nfrappe.response['company']=frappe.db.get_value(doctype,{'is_internal_supplier':is_internal_supplier,'supplier_name':supplier},'represents_company')",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "modified": "2020-09-21 14:56:45.221307",
  "name": "Auto Create Supplier Quotation",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": "Quotation",
  "script": "supplier=frappe.db.get_value('Supplier',{'is_internal_supplier':1,'represents_company':doc.company},'supplier_name')\ncompany=frappe.db.get_value('Customer',{'is_internal_Customer':1,'customer_name':doc.customer_name},'represents_company')\ncontact_person=frappe.db.get_value('Dynamic Link',{'parenttype':'Contact','link_doctype':'Supplier',\"link_name\":supplier},'parent')\nif company:\n    if supplier:\n        sq_doc=frappe.get_doc(dict(doctype = 'Supplier Quotation',\n                    supplier=supplier,\n                    company=company,\n                    valid_till=doc.valid_till,\n                    supplier_address=frappe.db.get_value(\"Dynamic Link\",{\"parenttype\":\"Address\",\"link_doctype\":\"Supplier\",\"link_name\":supplier},\"parent\"),\n                    contact_person=contact_person,\n        \t\t    contact_email=frappe.db.get_value('Contact Email', {'parenttype':'Contact','parent':contact_person},'email_id'),\n                    conversion_rate=1,\n                    quotation_no=doc.name,\n                    tc_name=doc.tc_name,\n                    terms=doc.terms,\n                    total=doc.total,\n                    grand_total=doc.grand_total,\n                    base_grand_total=doc.base_grand_total,\n                    rounded_total=doc.rounded_total,\n                    base_rounded_total=doc.base_rounded_total,\n                    rfq_no=frappe.db.get_value('Opportunity',doc.opportunity,'reference_no')\n                )).insert(ignore_mandatory=True)\n        for val in doc.items:\n                sq_doc.append('items', {\n                    'item_code':val.item_code,\n                    'qty':val.qty,\n                    'uom':val.uom,\n                    'stock_uom':val.stock_uom,\n                    'rate':val.rate,\n                    'amount':val.amount,\n                    'base_rate':val.base_rate,\n                    'base_amount':val.base_amount,\n                    'description':val.description,\n                'conversion_factor':val.conversion_factor\n                })\n        sq_doc.add_comment('Comment',' System created  '+sq_doc.name)\n        sq_doc.save()\n        doc.add_comment('Comment','  Supplier Quotation: '+sq_doc.name)  \nelse:\n    frappe.msgprint('Unable to create Supplier Quotation as customer: '+doc.customer_name +' is not associated with any company. Register the Company and submit the document: '+doc.name+ '. As Customer is not associated with any company, do not let Vendor submit the Quotation document.')\n    raise frappe.ValidationError('Unable to create Supplier Quotation as customer: '+doc.customer_name +' is not associated with any company. Register the Company and submit the document: '+doc.name+ '. As Customer is not associated with any company, do not let Vendor submit the Quotation document.')",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Cancel",
  "modified": "2020-09-21 14:57:03.381121",
  "name": "Validate Quotation",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": "Quotation",
  "script": "frappe.msgprint('Unable to cancel the document as Quotation '+doc.name+' is linked with the supplier quotation.')\nraise frappe.ValidationError('Unable to cancel the document as Quotation '+doc.name+' is linked with the supplier quotation.')",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "get_email",
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "modified": "2020-09-21 14:56:54.842757",
  "name": "Get Email",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": null,
  "script": "doctype=frappe.form_dict.get(\"doctype\")\nis_internal_customer=frappe.form_dict.get(\"is_internal_customer\")\ncustomer=frappe.form_dict.get(\"customer_name\")\ncompany=frappe.db.get_value('Customer',{'is_internal_Customer':is_internal_customer,'customer_name':customer},'represents_company')\nif company:\n    frappe.response['email']=frappe.db.get_value('User Permission',{'for_value':company,'allow':'Company'},'user')",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Cancel",
  "modified": "2020-09-21 14:56:33.133696",
  "name": "Validate Sales Invoice",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": "Sales Invoice",
  "script": "frappe.msgprint('Unable to cancel the document as Sales Invoice: '+doc.name+' is linked with purchase invoice documents.')\nraise frappe.ValidationError('Unable to cancel the document as Sales Invoice: '+doc.name+' is linked with purchase invoice documents.')\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "get_supplier_List",
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "modified": "2020-09-21 14:56:26.197015",
  "name": "Supplier List",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": null,
  "script": "item_group_list=json.loads(frappe.form_dict.get(\"item_group\"))\nsupplier_list=json.loads(frappe.form_dict.get(\"tag\"))\ngroup_list=[]\nfor item_group in item_group_list:\n    lft=frappe.db.get_value('Item Group',{'item_group_name':item_group},'lft')\n    rgt=frappe.db.get_value('Item Group',{'item_group_name':item_group},'rgt')\n    retrieved_item_group_list=[]\n    supplier=[]\n    parentList=[]\n    retrieved_item_group_list=frappe.db.get_list('Item Group',filters={'lft':['<=',lft],'rgt':['>=',rgt]},fields={'name'})\n    if retrieved_item_group_list:\n        for val in retrieved_item_group_list:\n            group_list.append(val.name)\n                    \n        for group in group_list:\n            supplier=frappe.db.get_list('Item Group Detail',filters={'item_group':group},fields={'parent'})\n            for row in supplier:\n                if row.parent not in supplier_list:\n                    supplier_list.append(row.parent)     \n        \nfrappe.response['supplierList']=supplier_list",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "modified": "2020-10-15 14:56:30.505575",
  "name": "On User Save",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": "User",
  "script": "same_user=frappe.db.get_list(\"User Permission\",filters={'user':doc.email,'allow':'Company','for_value':doc.represents_company},fields={'*'})\nif not same_user:\n    user=frappe.db.get_list(\"User Permission\",filters={'user':doc.email,'allow':'Company'},fields={'*'})\n    if user:\n            frappe.get_doc(dict(\n                    doctype = 'User Permission',\n                    user = doc.email,\n                    allow='Company',\n                    name=user[0].name,\n                    apply_to_all_doctypes=1\n                    )).delete()\n    \n    if(doc.is_system_admin!=1):                \n        up_doc=frappe.get_doc(dict(doctype = 'User Permission',\n                            user=doc.email,\n                            allow=\"Company\",\n                            for_value=doc.represents_company,\n                            apply_to_all_doctypes=1\n                )).insert(ignore_mandatory=True)\n        up_doc.save()\n    \n\n",
  "script_type": "DocType Event"
 }
]